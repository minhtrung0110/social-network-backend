// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// modify Database Scheme
model User {
  id                Int                @id @default(autoincrement())
  username          String?            @unique
  email             String             @unique @db.VarChar(256)
  password          String             @db.VarChar(256)
  token             String?            @db.VarChar(256)
  firstName         String?            @db.VarChar(256)
  lastName          String?            @db.VarChar(256)
  birthday          String?            @db.VarChar(256)
  gender            String?            @db.VarChar(256)
  phoneNumber       String?            @db.VarChar(256)
  address           String?            @db.VarChar(256)
  avatar            String?            @db.VarChar(256)
  twoFA             Boolean            @default(false)
  isPhoneVerified   Boolean            @default(false)
  status            Int
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  followedBy        Follow[]           @relation("user_followed")
  following         Follow[]           @relation("follow_user")
  savePost          Saved[]            @relation("save_post_user")
  comments          Comment[]          @relation("user_comment")
  userGroup         UserGroup[]        @relation("user_in_group")
  messages          Message[]          @relation("user's_message")
  userConservations UserConversation[] @relation("user_in_conversation")
  likes             Like[]             @relation("user_like_post")
  userPosts         Post[]             @relation("user_post")
  Otp               Otp[]              @relation("otp_user")
  // More
  @@map("users") // users id "table's name" in Postgres SQL
}

model Otp {
  id        Int       @id @default(autoincrement())
  userId    Int
  owner     User      @relation("otp_user", fields: [userId], references: [id])
  code      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  expiresAt DateTime  @db.Timestamp(5)
  useCase   UseCase
}

enum UseCase {
  LOGIN
  D2FA
  PHV
}

model Post {
  id        Int       @id @default(autoincrement())
  caption   String    @db.VarChar(256)
  tags      String?   @db.VarChar(256)
  imageUrl  String?   @db.VarChar(256)
  scope     Scope? //@relation("post_scope", fields: [scopeId], references: [id])
  userId    Int?
  user      User?     @relation("user_post", fields: [userId], references: [id])
  Like      Like[]    @relation("post_liked")
  comments  Comment[] @relation("user_comment_post")
  status    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // relationship
  postSaved Saved[]   @relation("save_user_post")

  // more
  @@map("posts")
}

// model Scope {
//   id        Int      @id @default(autoincrement())
//   name      String   @db.VarChar(256)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   // relationship
//   posts     Post[]   @relation("post_scope")
//   // More
//   @@map("scopes")
// }
enum Scope {
  private
  public
  follower
}

model Like {
  userId    Int
  User      User?    @relation("user_like_post", fields: [userId], references: [id])
  postId    Int
  post      Post?    @relation("post_liked", fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, postId])
  // More
  @@map("likes")
}

model Saved {
  userId    Int
  User      User?    @relation("save_post_user", fields: [userId], references: [id])
  postId    Int
  post      Post?    @relation("save_user_post", fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, postId])
  // More
  @@map("saved")
}

model Follow {
  // id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User?    @relation("user_followed", fields: [userId], references: [id])
  followId  Int
  follow    User?    @relation("follow_user", fields: [followId], references: [id])

  @@id([userId, followId])
  // More
  @@map("follow")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(256)
  userId    Int
  user      User?    @relation("user_comment", fields: [userId], references: [id])
  postId    Int
  post      Post?    @relation("user_comment_post", fields: [postId], references: [id])
  replyId   Int?
  // reply     Comment? @relation("reply_comment_relation", fields: [replyId], references: [id])
  // self      Comment  @relation("reply_comment_relation")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relationship
  // More
  @@map("comments")
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(256)
  status    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // groupUser UserGroup @relation("group")
  // More
  @@map("groups")
}

model UserGroup {
  userId    Int
  user      User?    @relation("user_in_group", fields: [userId], references: [id])
  groupId   Int
  // group     Group?   @relation("group", fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, groupId])
  // More
  @@map("user_in_group")
}

model Message {
  id             Int           @id @default(autoincrement())
  content        String        @db.VarChar(256)
  userId         Int
  user           User?         @relation("user's_message", fields: [userId], references: [id])
  conversationId Int
  conversation   Conversation? @relation("conversation's_message", fields: [conversationId], references: [id])
  status         Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // More
  @@map("messages")
}

model Conversation {
  id                Int                @id @default(autoincrement())
  title             String             @db.VarChar(256)
  icon              String             @db.VarChar(256)
  theme             String             @db.VarChar(256)
  status            Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  messages          Message[]          @relation("conversation's_message")
  // relationships
  conversationUsers UserConversation[] @relation("conversation")

  // More
  @@map("conversations")
}

model UserConversation {
  userId         Int
  user           User?         @relation("user_in_conversation", fields: [userId], references: [id])
  conversationId Int
  conversation   Conversation? @relation("conversation", fields: [conversationId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@id([userId, conversationId])
  // More
  @@map("users_in_conversations")
}
